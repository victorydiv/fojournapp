import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Card,
  CardContent,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField
} from '@mui/material';
import { Add as AddIcon } from '@mui/icons-material';
import { journeysAPI } from '../services/api';

interface Journey {
  id: number;
  title: string;
  description: string;
  start_date: string;
  end_date: string;
}

const Journeys: React.FC = () => {
  const [journeys, setJourneys] = useState<Journey[]>([]);
  const [loading, setLoading] = useState(true);
  const [createDialogOpen, setCreateDialogOpen] = useState(false);
  const [newJourney, setNewJourney] = useState({
    title: '',
    description: '',
    start_date: '',
    end_date: ''
  });

  useEffect(() => {
    const fetchJourneys = async () => {
      try {
        const response = await journeysAPI.getJourneys();
        setJourneys(response.data);
      } catch (error) {
        console.error('Error fetching journeys:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchJourneys();
  }, []);

  const handleCreateJourney = async () => {
    if (newJourney.title && newJourney.start_date && newJourney.end_date) {
      try {
        const response = await journeysAPI.createJourney(newJourney);
        setJourneys(prev => [...prev, response.data]);
        setCreateDialogOpen(false);
        setNewJourney({
          title: '',
          description: '',
          start_date: '',
          end_date: ''
        });
      } catch (error) {
        console.error('Error creating journey:', error);
      }
    }
  };

  if (loading) {
    return <Container><Typography>Loading...</Typography></Container>;
  }

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h4" component="h1">
          My Journeys
        </Typography>
        <Button
          variant="contained"
          startIcon={<AddIcon />}
          onClick={() => setCreateDialogOpen(true)}
        >
          Plan New Journey
        </Button>
      </Box>

      <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))', gap: 3 }}>
        {journeys.map((journey) => (
          <Card key={journey.id}>
            <CardContent>
              <Typography variant="h6" component="h2">
                {journey.title}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {journey.description}
              </Typography>
              <Typography variant="caption">
                {journey.start_date} - {journey.end_date}
              </Typography>
            </CardContent>
          </Card>
        ))}
      </Box>

      <Dialog open={createDialogOpen} onClose={() => setCreateDialogOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Plan New Journey</DialogTitle>
        <DialogContent>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 1 }}>
            <TextField
              fullWidth
              label="Journey Title"
              value={newJourney.title}
              onChange={(e) => setNewJourney(prev => ({ ...prev, title: e.target.value }))}
            />
            <TextField
              fullWidth
              label="Description"
              value={newJourney.description}
              onChange={(e) => setNewJourney(prev => ({ ...prev, description: e.target.value }))}
            />
            <TextField
              fullWidth
              type="date"
              label="Start Date"
              value={newJourney.start_date}
              onChange={(e) => setNewJourney(prev => ({ ...prev, start_date: e.target.value }))}
              InputLabelProps={{ shrink: true }}
            />
            <TextField
              fullWidth
              type="date"
              label="End Date"
              value={newJourney.end_date}
              onChange={(e) => setNewJourney(prev => ({ ...prev, end_date: e.target.value }))}
              InputLabelProps={{ shrink: true }}
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setCreateDialogOpen(false)}>Cancel</Button>
          <Button 
            onClick={handleCreateJourney} 
            variant="contained"
            disabled={!newJourney.title || !newJourney.start_date || !newJourney.end_date}
          >
            Create Journey
          </Button>
        </DialogActions>
      </Dialog>
    </Container>
  );
};

export default Journeys;
